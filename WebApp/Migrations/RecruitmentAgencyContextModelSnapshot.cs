// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Models;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(RecruitmentAgencyContext))]
    partial class RecruitmentAgencyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CandidateSkill", b =>
                {
                    b.Property<int>("CandidateId")
                        .HasColumnType("int")
                        .HasColumnName("candidate_id");

                    b.Property<int>("SkillId")
                        .HasColumnType("int")
                        .HasColumnName("skill_id");

                    b.HasKey("CandidateId", "SkillId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CandidateId" }, "candidate_skill_fk_candidate_id_idx");

                    b.HasIndex(new[] { "SkillId" }, "candidate_skill_fk_skill_id_idx");

                    b.ToTable("CandidateSkill", (string)null);
                });

            modelBuilder.Entity("JobVacancySkill", b =>
                {
                    b.Property<int>("JobVacancyId")
                        .HasColumnType("int")
                        .HasColumnName("job_vacancy_id");

                    b.Property<int>("SkillId")
                        .HasColumnType("int")
                        .HasColumnName("skill_id");

                    b.HasKey("JobVacancyId", "SkillId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "JobVacancyId" }, "job_vacancy_skill_fk_job_vacancy_id_idx");

                    b.HasIndex(new[] { "SkillId" }, "job_vacancy_skill_fk_skill_id_idx");

                    b.ToTable("JobVacancySkill", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contact_info");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasColumnType("enum('Active','Inactive','Looking for Opportunities')")
                        .HasColumnName("current_status");

                    b.Property<string>("Education")
                        .HasColumnType("text")
                        .HasColumnName("education");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.Property<string>("Resume")
                        .HasColumnType("text")
                        .HasColumnName("resume");

                    b.Property<string>("WorkExperience")
                        .HasColumnType("text")
                        .HasColumnName("work_experience");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Candidate", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CompanySize")
                        .HasColumnType("enum('Small','Medium','Large')")
                        .HasColumnName("company_size");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("industry");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("address");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<string>("Email")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "CompanyId" }, "employer_fk_company_id_idx");

                    b.HasIndex(new[] { "Phone" }, "phone_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "unique_email")
                        .IsUnique();

                    b.ToTable("Employer", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.HiringEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int")
                        .HasColumnName("candidate_id");

                    b.Property<string>("Feedback")
                        .HasColumnType("text")
                        .HasColumnName("feedback");

                    b.Property<int?>("RecruiterId")
                        .HasColumnType("int")
                        .HasColumnName("recruiter_id");

                    b.Property<int?>("VacancyId")
                        .HasColumnType("int")
                        .HasColumnName("vacancy_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CandidateId" }, "hiring_event_fk_candidate_id");

                    b.HasIndex(new[] { "VacancyId" }, "hiring_event_fk_job_vacancy_id");

                    b.HasIndex(new[] { "RecruiterId" }, "hiring_event_fk_recruiter_id");

                    b.ToTable("HiringEvent", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.HiringEventStage", b =>
                {
                    b.Property<int>("HiringEventId")
                        .HasColumnType("int")
                        .HasColumnName("hiring_event_id");

                    b.Property<string>("Stage")
                        .HasColumnType("enum('Applied','Interview','Offer','Rejected')")
                        .HasColumnName("stage");

                    b.Property<string>("Status")
                        .HasColumnType("enum('Pending','Accepted','Rejected')")
                        .HasColumnName("status");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("end_date");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("HiringEventId", "Stage", "Status")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "HiringEventId" }, "hiring_event_stage_fk_hiring_event_id");

                    b.ToTable("HiringEventStage", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.JobVacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("currency");

                    b.Property<string>("JobDescription")
                        .HasColumnType("text")
                        .HasColumnName("job_description");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("job_title");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location");

                    b.Property<int?>("RecruiterId")
                        .HasColumnType("int")
                        .HasColumnName("recruiter_id");

                    b.Property<string>("Requirements")
                        .HasColumnType("text")
                        .HasColumnName("requirements");

                    b.Property<decimal?>("Salary")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("salary");

                    b.Property<string>("VacancyStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Open','Closed','Pending')")
                        .HasColumnName("vacancy_status")
                        .HasDefaultValueSql("'Open'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RecruiterId" }, "recruiter_id_idx");

                    b.ToTable("JobVacancy", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.Recruiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contact_info");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("specialization");

                    b.Property<int>("SuccessfulClosures")
                        .HasColumnType("int")
                        .HasColumnName("successful_closures");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CompanyId" }, "recruiter_fk_company_id");

                    b.ToTable("Recruiter", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "name_UNIQUE")
                        .IsUnique();

                    b.ToTable("Skill", (string)null);
                });

            modelBuilder.Entity("CandidateSkill", b =>
                {
                    b.HasOne("WebApp.Models.Candidate", null)
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("candidate_skill_fk_candidate_id");

                    b.HasOne("WebApp.Models.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("candidate_skill_fk_skill_id");
                });

            modelBuilder.Entity("JobVacancySkill", b =>
                {
                    b.HasOne("WebApp.Models.JobVacancy", null)
                        .WithMany()
                        .HasForeignKey("JobVacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("job_vacancy_skill_fk_job_vacancy_id");

                    b.HasOne("WebApp.Models.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("job_vacancy_skill_fk_skill_id");
                });

            modelBuilder.Entity("WebApp.Models.Employer", b =>
                {
                    b.HasOne("WebApp.Models.Company", "Company")
                        .WithMany("Employers")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("employer_fk_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WebApp.Models.HiringEvent", b =>
                {
                    b.HasOne("WebApp.Models.Candidate", "Candidate")
                        .WithMany("HiringEvents")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("hiring_event_fk_candidate_id");

                    b.HasOne("WebApp.Models.Recruiter", "Recruiter")
                        .WithMany("HiringEvents")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("hiring_event_fk_recruiter_id");

                    b.HasOne("WebApp.Models.JobVacancy", "Vacancy")
                        .WithMany("HiringEvents")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("hiring_event_fk_job_vacancy_id");

                    b.Navigation("Candidate");

                    b.Navigation("Recruiter");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("WebApp.Models.HiringEventStage", b =>
                {
                    b.HasOne("WebApp.Models.HiringEvent", "HiringEvent")
                        .WithMany("HiringEventStages")
                        .HasForeignKey("HiringEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hiring_event_stage_fk_hiring_event_id");

                    b.Navigation("HiringEvent");
                });

            modelBuilder.Entity("WebApp.Models.JobVacancy", b =>
                {
                    b.HasOne("WebApp.Models.Recruiter", "Recruiter")
                        .WithMany("JobVacancies")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("job_vacancy_fk_recruiter_id");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("WebApp.Models.Recruiter", b =>
                {
                    b.HasOne("WebApp.Models.Company", "Company")
                        .WithMany("Recruiters")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("recruiter_fk_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WebApp.Models.Candidate", b =>
                {
                    b.Navigation("HiringEvents");
                });

            modelBuilder.Entity("WebApp.Models.Company", b =>
                {
                    b.Navigation("Employers");

                    b.Navigation("Recruiters");
                });

            modelBuilder.Entity("WebApp.Models.HiringEvent", b =>
                {
                    b.Navigation("HiringEventStages");
                });

            modelBuilder.Entity("WebApp.Models.JobVacancy", b =>
                {
                    b.Navigation("HiringEvents");
                });

            modelBuilder.Entity("WebApp.Models.Recruiter", b =>
                {
                    b.Navigation("HiringEvents");

                    b.Navigation("JobVacancies");
                });
#pragma warning restore 612, 618
        }
    }
}
